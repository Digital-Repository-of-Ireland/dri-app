#!/bin/bash

if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then
  # First try to load from a user install
  source "$HOME/.rvm/scripts/rvm"
elif [[ -s "/usr/local/rvm/scripts/rvm" ]] ; then
  # Then try to load from a root install
  source "/usr/local/rvm/scripts/rvm"
else
  printf "ERROR: An RVM installation was not found.\n"
fi

rvm use ruby-2.4.4 || exit 100

branch=$(echo $GIT_BRANCH | cut -d / -f 2)
rvm use ruby-2.4.4@$branch --create || exit 100

#branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

case $1 in
patch)
    ;;
install_deps)
    ;;
configure)

rvm --force gemset empty ruby-2.4.4@$branch || exit 100
gem install bundler

cp config/fedora.yml.sample config/fedora.yml
cp config/solr.yml.sample config/solr.yml
cp config/database.yml.sample config/database.yml
cp config/redis.yml.sample config/redis.yml
#cp config/doi.yml.sample config/doi.yml

cat > config/settings.local.yml << __EOF__
interface:
  languages: [en, ga]
dri:
  files: dri_files
plugins:
  ffmpeg_path: /usr/bin/ffmpeg
S3:
  server: http://127.0.0.1:8081
  access_key_id: anykey
  secret_access_key: anykey
  bucket_prefix: buildbot
doi:
  enable: false
__EOF__

    bundle install --without production
    bundle exec rake db:migrate
    bundle exec rake db:seed
    bundle exec rake db:migrate
    bundle exec rake db:test:prepare
    SERVICES=s3:8081 /home/jenkins/.local/bin/localstack start &>/dev/null &
    echo $! > localstack.pid
    ;;
check)
    bundle exec rake ci_spec || exit 100
    bundle exec rake ci || exit 100
    bundle exec rake assets:precompile
    ;;
rspec)
    bundle exec rake jetty:start
    bundle exec rake jetty:config

    bundle exec rake rspec
    ;;
cucumber)
    bundle exec rake cucumber_ci
    ;;
api)
   bundle exec rake api:docs:generate
   ;; 
compile)
    bundle exec rake assets:precompile
    ;;
push)
    rm -rf dri-app-mirror
    git clone --mirror ssh://git@tracker.dri.ie:2200/drirepo/dri-app.git dri-app-mirror
    cd dri-app-mirror
    git remote set-url --push origin git@github.com:Digital-Repository-of-Ireland/dri-app.git
    git fetch -p origin
    git push --mirror
    cd ..
    ;;
upload)

    cd ~/dri-app.git
    git fetch -p origin
    git push --mirror
    cd -

    #only deploy to test instance on develop branch
    if [[ "$branch" == "develop" ]]; then

      #setup ssh agent for key forwarding to work
      eval ssh-agent $SHELL
      eval "$(ssh-agent)"
      ssh-add ~/.ssh/id_rsa

      #Now deploy update app repo codebase
      ansible-playbook -i ../../ansible-dri-infrastructure-trusty64-master/build/inventory/hosts.buildbot ../../ansible-dri-infrastructure-trusty64-master/build/site.yml --vault-password-file=~/.vault-pass.txt -e "deploy_branch=develop" --tags=getfacts,dri_app,dri_app_worker --extra-vars=base_user=tchpc
    fi

    ;;
compile_extra)

    #only check test instance on develop branch
    if [[ "$branch" == "false" ]]; then

      #check application
      OUTPUT=`curl -s -o /dev/null -I -w "%{http_code}" http://test.dri.ie/is_it_working`
      sleep 60
      OUTPUT=`curl -s -o /dev/null -I -w "%{http_code}" http://test.dri.ie/is_it_working`

      if [[ $OUTPUT -ne 200 ]] ; then
        printf "Test Application Stack FAULT! [HTTP: $OUTPUT]\n"
        exit 1
      else
        printf "Test Application Stack OK. [HTTP: $OUTPUT]\n"
      fi

    fi

    ;;
uninstall_deps)
    kill -TERM $(cat localstack.pid) || true
    ;;
esac
